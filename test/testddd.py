"""
This script is used to test gdb user document.

It read test doc from ../command.rst, then replace the line like

    $(gdb) cmd

    with

    >>> pyddd.command('source init.gdb')

so doctest can run the gdb command and compare the output.

"""
import multiprocessing
import os
import re
import select
import socket
import subprocess
import sys
import threading
import time

args = './gdb.exe', '--data-directory=./', '--quiet', '-nx'

class PyDDD(object):

    BUFSIZE = 4096
    def __init__(self):
        super(PyDDD, self).__init__()
        self.sockets = socket.socketpair()
        self._gdb = subprocess.Popen(
            args,
            stdout=self.sockets[0],
            stderr=subprocess.STDOUT,
            stdin=subprocess.PIPE,
            )

    def start(self):
        pass

    def stop(self):
        self.command('quit')

    def command(self, line):
        self._gdb.stdin.write(('%s\n' % line).encode())
        self.read_stdout()

    def read_stdout(self):
        r, w, x = select.select(self.sockets, [], [], 0.5)
        if r:
            print (self.sockets[1].recv(PyDDD.BUFSIZE))

    def call(self, lines):
        p = subprocess.Popen(
            args,
            bufsize=PyDDD.BUFSIZE,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            stdin=subprocess.PIPE,
            )
        outdata, errdata = p.communicate(lines)
        print (outdata)

def make_test_file(src):
    output = '~tmp-%s' % src
    with open(output, 'w') as f:
        f.write('# FILE IS GENERATED BY DOCTEST, DO NOT EDIT IT.\n')
    return output

if __name__ == "__main__":
    import doctest
    pyddd = PyDDD()
    pyddd.start()
    doctest.testmod()
    try:
        filename = sys.argv[1]
    except IndexError:
        filename = '../command.rst'
    if os.path.exists(filename):
        tmpfile = make_test_file(filename)
        try:
            doctest.testfile(tmpfile)
        finally:
            os.remove(tmpfile)
    pyddd.stop()
