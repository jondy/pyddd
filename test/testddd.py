"""
This script is used to test gdb user document.

It read test doc from ../handbook.rst, then replace the line like

  '$(gdb) cmd'       with       '>>> pyddd.command(cmd)'

so doctest can run the gdb command and compare the output.

"""
import multiprocessing
import re
import subprocess
import sys

PROMPT = '(gdb)'
args = './gdb.exe', '--data-directory=.', '--quiet', '-nx', '-x', 'init.gdb'

def print_output(p):
    while True:
        line = p.stdout.readline()
        sys.stdout.write(line)
        if line == '':
            break

class PyDDD(object):

    def __init__(self):
        super(PyDDD, self).__init__()
        self._gdb = subprocess.Popen(
            args,
            bufsize=1,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            stdin=subprocess.PIPE,
            )

    def start(self):
        p = multiprocessing.Process(target=print_output, args=(self._gdb,))
        # p.start()

    def stop(self):
        assert self._gdb is not None
        self._gdb.stdin.write('quit\n')

    def command(self, line):
        assert self._gdb is not None
        self._gdb.stdin.write(line)
        self._gdb.stdin.write('\necho \\n\n')
        output = self._gdb.stdout.readline()
        sys.stdout.write(output.replace(PROMPT, '%s %s\n' % (PROMPT, line)))
            while 1:
                output = self._gdb.stdout.readline()
                sys.stdout.write(output)
                if output[:-2] == PROMPT:
                    break


    def call(self, lines):
        p = subprocess.Popen(
            args,
            bufsize=4096,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            stdin=subprocess.PIPE,
            )
        outdata, errdata = p.communicate(lines)
        print (outdata)

def make_test_file(src):
    output = 'tmp-handbook.rst'
    with open(output, 'w') as f:
        f.write('# FILE IS GENERATED BY DOCTEST, DO NOT EDIT IT.\n')
    return output

if __name__ == "__main__":
    import doctest
    pyddd = PyDDD()
    pyddd.start()
    doctest.testmod()
    try:
        doctest.testfile(make_test_file(sys.argv[1]))
    except IndexError:
        pass
    pyddd.stop()

