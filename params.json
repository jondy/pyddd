{"name":"Pyddd","tagline":"Line by Line Debug Python Scripts In GDB","body":"Pyddd is a super-GDB debugger which could debug python scripts as the same way to debug c program line by line in the same inferior.\r\n\r\nPurpose\r\n=======\r\n\r\nWrite a debuger which can debug Python scripts line by line same as C/C++. So that we can easily debug Python scripts and C/C++ extensions within GDB.\r\n\r\nCausation\r\n=========\r\n\r\nI always uses Python plus C/C++ to develop my most of applications. Generally, use GDB to debug python C/C++ extensions, and insert extra print statements in Python scripts. There is a gdb extension \"libpython.py\" within Python sources, it could print Python frame, locals/globals variable, Python sources in GDB. But it couldn't\r\nset breakpoints in Python scripts directly. Finally, I decided to write a debugger to extend GDB could debug Python scripts line by line, just like debugging c/c++.\r\n\r\nProposal\r\n========\r\n\r\nStart to debug Python script:\r\n\r\n```\r\n  (gdb) py-exec-file /usr/local/bin/python2.7\r\n  (gdb) py-file beer.py\r\n  (gdb) py-args 10\r\n  (gdb) py-start\r\n```\r\n\r\nGDB will stop at the first code line of beer.py. If use `py-run` instead `py-start`:\r\n\r\n```\r\n  (gdb) py-run\r\n```\r\n\r\nGDB will not stop at the begging of beer.py, until hit some breakpoint.\r\n\r\nSet Python arguments, for example, unbuffered binary stdout and stderr:\r\n\r\n```\r\n  (gdb) py-exec-args -u\r\n```\r\n\r\nSet breakpoints in Python script:\r\n\r\n```\r\n  (gdb) py-break 10\r\n  (gdb) py-break beer.py:10\r\n  (gdb) py-break bottle\r\n  (gdb) py-break beer.py:bottle\r\n  (gdb) py-break bottle:+3\r\n  (gdb) py-break bottle:-3\r\n```\r\n\r\nSet condition of breakpoints:\r\n\r\n```\r\n  (gdb) py-break location if condition\r\n  (gdb) py-condition bnum condition\r\n```\r\n\r\ncondition may be any valid Python expression. It will not stop if symbol in condition isn't available in the current context.\r\n\r\nSet temporary breakpoints, arguments are same with `py-break`:\r\n\r\n```\r\n  (gdb) py-tbreak ...\r\n```\r\n\r\nDelete breakpoints:\r\n\r\n```\r\n  (gdb) py-clear\r\n  (gdb) py-clear location\r\n  (gdb) py-delete [breakpoints] [range...]\r\n```\r\n\r\nDisable breakpoints:\r\n\r\n```\r\n  (gdb) py-disable [breakpoints] [range...]\r\n  (gdb) py-enable [breakpoints] [range...]\r\n  (gdb) py-enable [breakpoints] once range...\r\n  (gdb) py-enable [breakpoints] count count range...\r\n  (gdb) py-enable [breakpoints] delete range...\r\n```\r\n\r\nBreakpoint Command Lists:\r\n\r\n```\r\n  (gdb) py-commands [range...]\r\n          ... command-list ...\r\n          end\r\n```\r\n\r\nShow breakpoints:\r\n\r\n```\r\n  (gdb) py-info [breakpoints] [range...]\r\n\r\n```\r\n\r\nCatch exception and function call:\r\n\r\n```\r\n  (gdb) py-catch exception name\r\n  (gdb) py-catch call name\r\n```\r\n\r\nGDB will stop when exception name is raised or function name is called.\r\n\r\nAdd temporary catchpoint:\r\n\r\n```\r\n  (gdb) py-tcatch exception name\r\n  (gdb) py-tcatch call name\r\n```\r\n\r\nClear catchpoints:\r\n\r\n```\r\n  (gdb) py-catch clear name\r\n```\r\n\r\nShow catchpoints:\r\n\r\n```\r\n  (gdb) py-catch info [ranges...]\r\n```\r\n\r\nContinuing and Stepping:\r\n\r\n```\r\n  (gdb) py-continue [ignore-count]\r\n  (gdb) py-step [count]\r\n  (gdb) py-next [count]\r\n  (gdb) py-finish\r\n  (gdb) py-until\r\n  (gdb) py-until location\r\n  (gdb) py-advance location\r\n```\r\n\r\nExamining Python Scripts:\r\n\r\n```\r\n  (gdb) py-list linenum\r\n  (gdb) py-list function\r\n  (gdb) py-list\r\n  (gdb) py-list -\r\n  (gdb) py-list +\r\n  (gdb) py-list first,last\r\n  (gdb) py-list first,\r\n  (gdb) py-list ,last\r\n```\r\n\r\nExamining Python frame stack:\r\n\r\n```\r\n  (gdb) py-frame\r\n  (gdb) py-frame n\r\n  (gdb) py-frame function\r\n  (gdb) py-up [n]\r\n  (gdb) py-down [n]\r\n  (gdb) py-select-frame framespec\r\n```\r\n\r\nExamining Python backtrace:\r\n\r\n```\r\n  (gdb) py-bt\r\n  (gdb) py-bt n\r\n  (gdb) py-bt -n\r\n  (gdb) py-bt full\r\n  (gdb) py-bt full n\r\n  (gdb) py-bt full -n\r\n```\r\n\r\nExamining Python Data:\r\n\r\n```\r\n  (gdb) py-print expr\r\n  (gdb) py-locals\r\n  (gdb) py-locals varname\r\n  (gdb) py-globals\r\n  (gdb) py-globals varname\r\n```\r\n\r\nAltering Python local/global variable:\r\n\r\n```\r\n  (gdb) py-set-var name expression\r\n  (gdb) py-set-var /global name expression\r\n```\r\n\r\nWorkaround\r\n==========\r\n\r\nFortunately, Python has its line-trace mechanism, see \"PySys_SetTrace\" in \"Python/sysmodule.c\" and \"PyEval_SetTrace\" in \"Python/ceval.c\". In order to stop Python Scripts in GDB, we need write a trace function in c or c++, install the trace function when run python scripts. In trace function check all the *Python Breakpoints*, and execute a statement which include a GDB *Breakpoint*. Here is the basic scenario:\r\n\r\n  - Write our own trace function in C, and build it as a shared library.\r\n  - Manage *Python Breakpoints* in this library.\r\n  - In GDB, load this library and install trace function after start\r\n    to debug python scripts.\r\n  - In GDB, set a *Breakpoint* in trace function. It will execute the\r\n    statement in this *Breakpoint* if any *Python Breakpoint* is\r\n    hit. By this way, a *Python Breakpint* is transferred a standard\r\n    GDB *Breakpoint*.\r\n\r\nIn order to get the lineno of each imported class/function in runtime, The two GDB *Breakpoints* at \"PyImport_ExecCodeModuleEx\" and \"PyCode_New\" are set.\r\n\r\nHere is prototype of \"PyImport_ExecCodeModuleEx\":\r\n\r\n  > PyObject* PyImport_ExecCodeModuleEx(char *name, PyObject *co, char *pathname);\r\n\r\nWhen GDB stop at \"PyImport_ExecCodeModuleEx\", \"name\" and \"pathname\" could be got from the current frame:\r\n\r\n```\r\n  set $name = (char*)($fp + sizeof($fp) + sizeof($pc))\r\n  set $pathname = (char*)($fp + sizeof($fp) + sizeof($pc) + sizeof(char*) + sizeof(PyObject*)\r\n```\r\n\r\nFor the concerned module, enable *Breakpoint* \"PyCode_New\"; Otherwise disable. Because there are many python scripts are imported, only a few are required to debug.\r\n\r\nWhen GDB stop at \"PyCode_New\", as the same way, \"name\" and \"firstlineno\" could be got from current frame. When name equals \"<module>\", it means last code object in this module, disable this *Breakpoint* self.\r\n\r\n\r\nImplementation\r\n==============\r\n\r\nSee ipa.c, init.gdb and libddd.py\r\n\r\nExample\r\n=======\r\n\r\nThis example is doc-tested, run the following command to test it:\r\n\r\n```\r\n  $ python testddd.py -v\r\n```\r\n\r\nLoad init.gdb of *PYDDD*:\r\n\r\n```\r\n    (gdb) source init.gdb\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    No symbol table is loaded.  Use the \"file\" command.\r\n    (gdb)\r\n```\r\n\r\nSpecify which python is used:\r\n\r\n```\r\n    (gdb) py-exec-file python\r\n    Reading symbols from ...python...(no debugging symbols found)...done.\r\n    (gdb)\r\n```\r\n\r\nSpecify main script:\r\n\r\n```\r\n    (gdb) py-file beer.py\r\n    main script is beer.py\r\n    (gdb)\r\n```\r\n\r\nStart debug:\r\n\r\n```\r\n    (gdb) py-start\r\n    Add temporary catchpoint #1, catch call:<module>\r\n    load symbols from main script\r\n    Disabled autoload imported symbol\r\n    [New Thread ...]\r\n    [New Thread ...]\r\n    Enabled autoload imported symbol\r\n    Catch function call: <module>\r\n    #0 <module> ( ) at beer.py:5\r\n      >5    import sys\r\n    Remove temporary catchpoint #1\r\n    (gdb)\r\n```\r\n\r\nShow sources:\r\n\r\n```\r\n    (gdb) py-list\r\n      >5    import sys\r\n       6\r\n       7    n = 10\r\n       8    if sys.argv[1:]:\r\n       9        n = int(sys.argv[1])\r\n      10\r\n      11    def bottle(n):\r\n      12        if n == 0: return \"no more bottles of beer\"\r\n      13        if n == 1: return \"one bottle of beer\"\r\n      14        return str(n) + \" bottles of beer\"\r\n      15\r\n    (gdb)\r\n```\r\n\r\nContinue script:\r\n\r\n```\r\n    (gdb) py-continue\r\n    Continuing.\r\n    ...\r\n    (gdb)\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}